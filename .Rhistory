get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "b", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "b", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
# DD is diamonds, 7s, BBB = triple bars, BB = double bars, B = single bars, c = cherries, 0= 0
# items have different probs of being sampled. give those values when defining the sample function.
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "b", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols()
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
-------------------------------------------------------------------
symbols<- get_symbols()
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
symbols<- get_symbols()
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
}
play<- function(){
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
Num <- 1000000
print(num)
Num <- 1000000
print(Num)
class(Num) <- c(POSIXct, POSIXt)
class(Num) <- c(POSIXcT, POSIXt)
class(Num) <- c("POSIXcT", "POSIXt")
print(Num)
Num <- 1000000
print(Num)
class(Num) <- c("POSIXcT", "POSIXt")
print(Num)
Num <- 1000000
print(Num)
class(Num) <- c("POSIXct", "POSIXt")
print(Num)
num <- 1000000000
print(num)
class(num) <- c("POSIXct", "POSIXt")
print(num)
deck<- array(c("ace","king", "Queen","Jack,"10","9"."8", "7","6",
deck<- array(c("ace","king", "Queen","Jack,'10','9'.'8', '7','6',
'5','4','3','2','1'), dim = c(2,7))
deck
deck<- array( c("ace","king", "Queen","Jack,'10','9'.'8', '7','6','5','4','3','2','1'), dim = c(2,7))
deck<- c("ace","king", "Queen","Jack,'10','9'.'8', '7','6','5','4','3','2','1'), dim = c(2,7))
deck
deck<- c("ace","king", "Queen","Jack,'10','9'.'8', '7','6','5','4','3','2','1')
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
deck <- array(c("ace","king","queen", "jack"), dim = c(2,2))
deck
deck <- c(names= "ace","king","queen","jack", values = 13, 12, 11, 10, dim = c(2,2))
deck
names(deck)
names(deck)
deck <- array(c("ace","king","queen","jack"), dim = c(2,2))
names(deck)
names(deck) <- c("ace", "king", "queen", "jack")
names(deck) <- c("ace", "king", "queen", "jack")
values(deck) <- c(13:10)
deck_df<- data.frame(face= c("ace","king","queen","jack"),
suit = c("hearts", "hearts", "hearts", "spades"),
value = c(13:10))
deck_df
deck <- deck_df
attributes(deck)
----------------------------------------------------------
#play slots
play<- function(){
symbols <- get_symbols()
print(symbols)
score(symbols)
}
class(deck)
names(deck)
dim(deck)
row.names(deck)
levels(deck)
row.names(deck) <- 100:104
row.names(deck) <- 100:103
row.names(deck)
levels(deck) <- c("level 1", "level 2", "level 3")
attributes(deck)
one_play <- play()
one_play
attributes(one_play)
attr(one_play, "symbols") <- c("B","0", "B")
attributes(one_play)
attr(One_play,"symbols")
attr(one_play,"symbols")
attr(one_play, "symbols") <- c("B","0", "B")
attributes(one_play)
attr(one_play, "score")
attr(one_play, "score")<- score()
attr(one_play, "score")<- score(symbols)
attr(one_play, "score")
attributes(deck)
one_play
attr(symbols)
attributes(symbols)
attr(symbols, "score")<- (
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
})
attr(symbols, "score")
attr(symbols, "score")<- score(symbols)
attr(symbols, "score")
play<- function(){
symbols <- get_symbols()
ssymbols<- score(symbols)
attr(ssymbols, "symbols")<- symbols
}
play()
play<- function(){
symbols <- get_symbols()
ssymbols<- score(symbols)
attr(ssymbols, "symbols")<- symbols
}
play()
symbols <- get_symbols()
ssymbols<- score(symbols)
attr(ssymbols, "symbols")<- symbols
play<- function(){
symbols <- get_symbols()
ssymbols<- score(symbols)
attr(ssymbols, "symbols")<- symbols
}
play()
play<- function(){
symbols <- get_symbols()
ssymbols<- score(symbols)
attr(ssymbols, "symbols")<- symbols
attributes(ssymbols)
}
play()
#Build slot machine
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
-------------------------------------------------------------------
symbols<- get_symbols()
symbols<- get_symbols()
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
}
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
symbols<- get_symbols()
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
}
play<- function(){
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
play<- function(){
symbols <- get_symbols()
score(symbols)
ssymbols<- score(symbols)
attr(ssymbols, "symbols")<- symbols
attributes(ssymbols)
}
play()
play<- function(){
symbols <- get_symbols()
ssymbols<- score(symbols)
attr(ssymbols, "symbols")<- symbols
attr(ssymbols, "score")<- score(symbols)
attributes(ssymbols)
}
play()
play<- function(){
symbols <- get_symbols()
ssymbols<- score(symbols)
attr(ssymbols, c("symbols","score")<- c(symbols, score(symbols))
attributes(ssymbols)
names(ssymbols) <- symbols
prize <-  score(symbols)
play<- function(){
symbols <- get_symbols()
prize <-  score(symbols)
attr(prize, "symbols")<- symbols
}
play()
play<- function(){
symbols <- get_symbols()
prize <-  score(symbols)
attr(prize, "symbols")<- symbols
attributes(prize)
}
play()
play<- function(){
symbols <- get_symbols()
prize <-  score(symbols)
attr(prize, "symbols")<- symbols
prize
}
play()
two_play <- play()
two_play
play<- function(){
symbols <- get_symbols()
structure(score(symbols), symbols = symbols)
}
three_play <- play()
three_play
symbols <- attr(prize, "symbols")
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
symbols<- get_symbols()
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
}
play<- function(){
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
one_play <- play()
one_play
attributes(one_play)
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
symbols<- get_symbols()
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
}
symbols<- get_symbols()
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
}
play<- function(){
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
play()
q
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols<-function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols<- function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols<- function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols<- function(){
wheel<- c("DD", '7', 'BBB',"BB", "B", "c", '0')
sample(wheel, size =3, replace = TRUE,
prob = c(0.03, 0.03,0.06, 0.1, 0.25, 0.01, 0.52))
}
symbols<- get_symbols()
score<- function(symbols){
#identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
#get prize
if(same) {
payouts_same <- c("DD"= 100, '7'= 80, 'BBB' = 40,"BB" = 25,
"B" = 10, "c" = 10, '0' = 0 )
prize<- unname(payouts_same[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "c")
prize<- c(0,2,5)[cherries+1]
}
#adjust for diamonds
diamonds <- sum(symbols == "DD")
prize* diamonds ^ 2
}
play<- function(){
symbols <- get_symbols()
prize <-  score(symbols)
attr(prize, "symbols")<- symbols
prize
}
play()
two_play <- play()
two_play
play<- function(){
symbols <- get_symbols()
structure(score(symbols), symbols = symbols)
}
three_play <- play()
three_play
symbols <- attr(prize, "symbols")
play<- function(){
symbols <- get_symbols()
prize <-  score(symbols)
attr(prize, "symbols")<- symbols
prize
}
play()
symbols <- get_symbols()
prize <-  score(symbols)
attr(prize, "symbols")<- symbols
prize
symbols <- attr(prize, "symbols")
symbols
symbols <- paste(symbols, collapse = '')
symbols
string <- paste(symbols, prize, sep = "\n$")
string
cat(string)
slot_display <- function(prize){
symbols <- attr(prize, "symbols")
symbols <- paste(symbols, collapse = '')
string <- paste(symbols, prize, sep = '\n$')
cat(string)
}
slot_display(play())
slot_display <- function(prize){
symbols <- attr(prize, "symbols")
symbols <- paste(symbols, collapse = " ")
string <- paste(symbols, prize, sep = '\n$')
cat(string)
}
slot_display(play())
